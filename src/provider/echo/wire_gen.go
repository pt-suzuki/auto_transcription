// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package echo

import (
	"cloud.google.com/go/firestore"
	"firebase.google.com/go/auth"
	"firebase.google.com/go/storage"
	converter2 "github.com/pt-suzuki/auto_transcription/src/controllers/echo/converter"
	"github.com/pt-suzuki/auto_transcription/src/domains/convert_result"
	"github.com/pt-suzuki/auto_transcription/src/domains/converter"
	"github.com/pt-suzuki/auto_transcription/src/domains/uploader"
	"github.com/pt-suzuki/auto_transcription/src/handler"
	"github.com/pt-suzuki/auto_transcription/src/middleware"
	converter3 "github.com/pt-suzuki/auto_transcription/src/middleware/converter"
	"github.com/pt-suzuki/auto_transcription/src/provider/echo/controllers"
	"github.com/pt-suzuki/auto_transcription/src/provider/echo/middlewares"
)

// Injectors from wire.go:

func Wire(fireStoreClient *firestore.Client, fireStorageClient *storage.Client, firebaseAuthClient *auth.Client) *Provider {
	translator := convert_result.NewConvertResultTranslator()
	repository := convert_result.NewRepository(fireStoreClient, translator)
	useCase := convert_result.NewUseCase(repository)
	responseHandler := handler.NewResponseHandler()
	speechToTextTranslator := converter.NewSpeechToTextTranslator(responseHandler)
	uploaderTranslator := uploader.NewTranslator()
	uploaderRepository := uploader.NewRepository(fireStoreClient, fireStorageClient, uploaderTranslator)
	uploaderUseCase := uploader.NewUseCase(uploaderRepository, useCase)
	speechToTextRepository := converter.NewSpeechToTextRepository(speechToTextTranslator)
	speechToTextUseCase := converter.NewSpeechToTextUseCase(useCase, speechToTextTranslator, uploaderUseCase, speechToTextRepository)
	convertSpeechToTextUploadFileResponder := converter2.NewConvertSpeechToTextUploadFileResponder()
	convertSpeechToTextUploadFileAction := converter2.NewConvertSpeechToTextUploadFileAction(speechToTextUseCase, speechToTextTranslator, convertSpeechToTextUploadFileResponder)
	convertSpeechToTextByUploadFileIDResponder := converter2.NewConvertSpeechToTextByUploadFileIDResponder()
	convertSpeechToTextByUploadFileIDAction := converter2.NewConvertSpeechToTextByUploadFileIDAction(speechToTextUseCase, speechToTextTranslator, convertSpeechToTextByUploadFileIDResponder)
	converterControllerProvider := controllers.NewConverterMiddlewareProvider(convertSpeechToTextUploadFileAction, convertSpeechToTextByUploadFileIDAction)
	controllerProvider := controllers.NewControllerProvider(converterControllerProvider)
	firebaseTokenVerifiedMiddleware := middleware.NewFirebaseTokenVerifiedMiddleware(firebaseAuthClient)
	convertSpeechToTextValidatorMiddleware := converter3.NewConvertSpeechToTextValidatorMiddleware(speechToTextTranslator)
	converterMiddlewareProvider := middlewares.NewConverterMiddlewareProvider(convertSpeechToTextValidatorMiddleware)
	middlewareProvider := middlewares.NewMiddlewareProvider(firebaseTokenVerifiedMiddleware, converterMiddlewareProvider)
	provider := NewProvider(controllerProvider, middlewareProvider)
	return provider
}
